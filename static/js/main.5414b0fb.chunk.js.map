{"version":3,"sources":["components/header/Header.js","components/Layout/Top.js","components/Layout/Bottom.js","components/Layout/Main.js","Store.js","components/Transactions/Transactions.js","components/Transactions/Layout.js","components/Layout/Form.js","components/Transactions/AddTransaction.js","App.js","index.js"],"names":["Header","AppBar","position","Toolbar","Typography","variant","React","Component","styles","width","height","fontSize","Top","numberWithCommas","x","toString","replace","transactions","this","props","totalIncome","filter","transaction","type","map","item","amount","reduce","acc","cur","totalExpenses","balance","Container","maxWidth","component","style","color","Grid","container","spacing","xs","md","lg","Bottom","categories","onSelect","category","index","findIndex","group","Paper","square","Tabs","value","indicatorColor","textColor","onChange","e","Tab","label","key","Main","Fragment","Transactions","onDelete","Card","id","marginTop","IconButton","float","onClick","CardContent","gutterBottom","notes","Layout","Form","state","open","handleChange","name","setState","target","handleToggle","handleTransaction","onSubmit","parseInt","Math","floor","random","Fab","aria-label","size","marginBottom","Dialog","onClose","handleDialog","DialogTitle","DialogContent","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","TextField","autoFocus","margin","fullWidth","multiline","DialogActions","Button","AddTransaction","App","handleCategorySelected","deleteSelectedTransaction","handleNewTransaction","Object","entries","getTransactionsByCategory","onEdit","editSelectedTransaction","ReactDOM","render","document","getElementById"],"mappings":"iQAoBeA,E,uKAdb,OACS,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACpB,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,iB,GANWC,IAAMC,W,kBCCrBC,EAAQ,CAKbC,MAAM,QAGNC,OAAO,OACLC,SAAS,QAsEGC,E,4MAjEXC,iBAAmB,SAAAC,GACnB,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,M,uDAE/C,IAIAC,EAAgBC,KAAKC,MAArBF,aAQIG,EAAcH,EAAaI,QAAO,SAAAC,GAAW,MAC7B,WAArBA,EAAYC,QAAmBC,KAAI,SAAAC,GAAI,OAAGA,EAAKC,UAAQC,QAAO,SAACC,EAAIC,GAAL,OAAYD,EAAKC,IAAI,GAOhFC,EAAgBb,EAAaI,QAAO,SAAAC,GAAW,MAC7B,YAArBA,EAAYC,QAAoBC,KAAI,SAAAC,GAAI,OAAGA,EAAKC,UAAQC,QAAO,SAACC,EAAIC,GAAL,OAAYD,EAAKC,IAAI,GAEjFE,EAAUX,EAAcU,EAKlC,OACC,kBAACE,EAAA,EAAD,CAAWC,SAAS,MAEf,kBAAC7B,EAAA,EAAD,CAAY8B,UAAU,MAAMC,MAAO3B,GAClC,yBAAK2B,MAAO,CAACC,MAAML,EAAU,EAAI,MAAO,UAIvCb,KAAKL,iBAAiBkB,KAMxB,kBAACM,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACzB,kBAACF,EAAA,EAAD,CAAMZ,MAAI,EAACe,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC9B,kBAACtC,EAAA,EAAD,CAAY+B,MAAO,CAACC,MAAM,UAA1B,kBAEiBlB,KAAKL,iBAAiBO,KAGvC,kBAACiB,EAAA,EAAD,CAAMZ,MAAI,EAACe,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC5B,kBAACtC,EAAA,EAAD,CAAY+B,MAAO,CAACC,MAAM,QAA1B,mBAEiBlB,KAAKL,iBAAiBiB,W,GAzD7BxB,IAAMC,W,0BCoDToC,E,uKA9DL,IAAD,EACiCzB,KAAKC,MAAtCyB,EADA,EACAA,WAAWC,EADX,EACWA,SAASC,EADpB,EACoBA,SAWjBC,EAAQD,EAQdF,EAAWI,WAAU,SAAAC,GAAK,OAAIA,IAAUH,KAAY,EAElD,EAGN,OACW,kBAACI,EAAA,EAAD,CAAOC,QAAM,GACxB,kBAACC,EAAA,EAAD,CAEEC,MAAON,EACPO,eAAe,UACfC,UAAU,UACVlD,QAAQ,YACTmD,SAAU,SAACC,EAAEV,GAIbF,EAAmB,IAAVE,EAAc,GAAIH,EAAWG,EAAQ,MAG7C,kBAACW,EAAA,EAAD,CAAKC,MAAM,qBAQVf,EAAWpB,KAAI,SAAAsB,GACd,OAAQ,kBAACY,EAAA,EAAD,CAAKC,MAAQb,EAAUc,IAAKd,a,GAnDrBxC,IAAMC,WCYZsD,E,uKAbL,IAAD,EAC6C3C,KAAKC,MAAlDyB,EADA,EACAA,WAAWC,EADX,EACWA,SAASC,EADpB,EACoBA,SAAS7B,EAD7B,EAC6BA,aACpC,OACF,kBAAC,IAAM6C,SAAP,KACA,kBAAC,EAAD,CAAK7C,aAAcA,IACnB,kBAAC,EAAD,CACA2B,WAAYA,EACZC,SAAUA,EACVC,SAAUA,U,GATSxC,IAAMC,WCFZqC,EAAY,CAAC,SAAS,WAEtB3B,EAAe,G,oDCgEb8C,E,uKAxDF,MAEwC7C,KAAKC,MAA1CF,EAFH,EAEGA,aAAc6B,EAFjB,EAEiBA,SAAUkB,EAF3B,EAE2BA,SAEhC,OACI,6BAME/C,EAAaO,KAAI,YAAwB,IAAD,mBAArBD,EAAqB,KAAhBN,EAAgB,KAKtC,OAAQ6B,GAAYA,IAAYvB,EAgCvB,KA9BD,kBAAC,IAAMuC,SAAP,CAAgBF,IAAKrC,GAGrBN,EAAaO,KAAI,SAAAF,GACzC,OAAO,kBAAC2C,EAAA,EAAD,CAAO5D,QAAQ,WAAWuD,IAAKtC,EAAY4C,GAAI/B,MAAO,CAACgC,UAAU,SACxD,kBAACC,EAAA,EAAD,CAAYjC,MAAO,CAACkC,MAAM,SAAUC,QAAS,kBAAIN,EAAS1C,EAAY4C,MACjE,kBAAC,IAAD,OAGO,kBAACK,EAAA,EAAD,KACE,kBAACnE,EAAA,EAAD,CAAcoE,cAAY,EAACnE,QAAQ,SAAnC,WACWiB,EAAYI,QAGvB,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQ6B,UAAU,MAAtC,YACWZ,EAAYwB,UAEvB,kBAAC1C,EAAA,EAAD,CAAcC,QAAQ,SAAtB,SACSiB,EAAYmD,OAErB,kBAACrE,EAAA,EAAD,CAAYC,QAAQ,QAAQ6B,UAAU,IAAIC,MAAO,CAACC,MAA4B,WAArBd,EAAYC,KAAoB,QAAS,QAChGD,EAAYC,qB,GAxCjBjB,IAAMC,WCgBlBmE,E,uKAnBN,MAEmCxD,KAAKC,MAAxCF,EAFA,EAEAA,aAAc6B,EAFd,EAEcA,SAASkB,EAFvB,EAEuBA,SAC9B,OACC,6BACA,kBAAC3B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACzB,kBAACF,EAAA,EAAD,CAAMZ,MAAI,EAACe,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACjC,kBAAC,EAAD,CAEAI,SAAUA,EACV7B,aAAcA,EACd+C,SAAWA,Y,GAZU1D,IAAMC,W,6ICmIZoE,E,4MAzHdC,MAAQ,CACRC,MAAK,EACHvD,YAAa,CACfI,OAAO,GACPH,KAAK,GACLuB,SAAS,GACT2B,MAAM,K,EAKNK,aAAe,SAAAC,GAAI,OAAI,SAAAtB,GACtB,EAAKuB,SAAS,CAGb1D,YAAW,eACH,EAAKsD,MAAMtD,YADR,eAEXyD,EAAQtB,EAAEwB,OAAO5B,Y,EAOpB6B,aAAa,WACZ,EAAKF,SAAS,CACbH,MAAM,EAAKD,MAAMC,Q,EAMnBM,kBAAmB,WAElB,EAAKD,eAML,EAAK/D,MAAMiE,SAAX,eACI,EAAKR,MAAMtD,YADf,CAECI,OAAO2D,SAAS,EAAKT,MAAMtD,YAAYI,QACvCwC,GAAGoB,KAAKC,MAAqB,IAAfD,KAAKE,aAGpB,EAAKR,SAAS,CACb1D,YAAa,CACdI,OAAO,GACPH,KAAK,GACLuB,SAAS,GACT2B,MAAM,O,uDAKE,MAE6CvD,KAAK0D,MAFlD,IAEAtD,YAAaI,EAFb,EAEaA,OAAOoB,EAFpB,EAEoBA,SAAS2B,EAF7B,EAE6BA,MAAOI,EAFpC,EAEoCA,KAE7C,OAAO,8BAEL,kBAACY,EAAA,EAAD,CAAKrD,MAAM,YAAYsD,aAAW,MAAMC,KAAK,QAAOrB,QAASpD,KAAKgE,aAAa/C,MAAO,CAACyD,aAAa,MAAMzB,UAAU,QAAQE,MAAM,UAC5H,kBAAC,IAAD,OAIN,kBAACwB,EAAA,EAAD,CACAhB,KAAMA,EACNiB,QAAU5E,KAAKgE,aACf1B,SAAWtC,KAAK6E,cACV,kBAACC,EAAA,EAAD,gBACA,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,CAAWjE,UAAU,UAArB,oBACA,kBAACkE,EAAA,EAAD,CAAa5C,SAAUtC,KAAK4D,aAAa,SACvC,kBAACuB,EAAA,EAAD,CAAkBhD,MAAM,SAASiD,QAAS,kBAACC,EAAA,EAAD,MAAW5C,MAAM,WAC3D,kBAAC0C,EAAA,EAAD,CAAkBhD,MAAM,UAAUiD,QAAS,kBAACC,EAAA,EAAD,MAAW5C,MAAM,cAGzD,kBAAC6C,EAAA,EAAD,CACCC,WAAS,EACTC,OAAO,QACP/C,MAAM,SACNpC,KAAK,SACL8B,MAAO3B,EACPiF,WAAS,EACTnD,SAAWtC,KAAK4D,aAAa,YAE9B,kBAAC0B,EAAA,EAAD,CACCC,WAAS,EACTC,OAAO,QACP/C,MAAM,WACNpC,KAAK,OACL8B,MAAOP,EACP6D,WAAS,EACTnD,SAAWtC,KAAK4D,aAAa,cAE9B,kBAAC0B,EAAA,EAAD,CACCC,WAAS,EACTC,OAAO,QACP/C,MAAM,QACNpC,KAAK,OACL8B,MAAOoB,EACPkC,WAAS,EACTC,WAAS,EACTpD,SAAWtC,KAAK4D,aAAa,YAGjC,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAS1E,MAAM,UAAUkC,QAASpD,KAAKiE,mBAAvC,e,GA/GS7E,IAAMC,WCJVwG,E,uKARL,IAAD,EACuB7F,KAAKC,MAA5BG,EADA,EACAA,YAAY8D,EADZ,EACYA,SACnB,OAAO,kBAAC,EAAD,CACA9D,YAAcA,EACd8D,SAAUA,S,GALU9E,IAAMC,WC+GpByG,E,4MAvGdpC,MAAO,CACN3D,eACA6B,SAAS,GACTxB,YAAY,I,EAKb2F,uBAAyB,SAACrE,GAAD,OACzB,EAAKoC,SAAS,CACblC,SAAWF,K,EAsCVsE,0BAA4B,SAAChD,GAC5B,EAAKc,UAAS,SAACJ,GAAD,MAAU,CACvB3D,aAAe2D,EAAM3D,aAAaI,QAAO,SAAAC,GAAW,OAAIA,EAAY4C,KAAOA,U,EAG7EiD,qBAAsB,SAAC7F,GACtB,EAAK0D,SAAS,CACb/D,aAAY,CACZK,GADY,mBAET,EAAKsD,MAAM3D,kB,0EA1ClB,OAAQC,KAAK0D,MAAM3D,aAAaU,QAAO,SAACV,EAAaK,GAAc,IAK1DC,EAAQD,EAARC,KAaA,OARPN,EAAaM,GAAQN,EAAaM,GAAb,sBAKjBN,EAAaM,IALI,CAKED,IACtB,CAACA,GAEYL,IAEb,M,+BA4BA,IAAMA,EAAemG,OAAOC,QAAQnG,KAAKoG,6BADpC,EAWsBpG,KAAK0D,MAA7B9B,EAXE,EAWFA,SAASxB,EAXP,EAWOA,YAEd,OAEC,kBAAC,IAAMwC,SAAP,KACA,6BACA,kBAAC,EAAD,MAGC,kBAAC,EAAD,CACA7C,aAAcC,KAAK0D,MAAM3D,aACzB2B,WAAaA,EACbC,SAAW3B,KAAK+F,uBAChBnE,SAAUA,IACV,kBAAC,EAAD,CAEAyE,OAAQrG,KAAKsG,wBACbxD,SAAW9C,KAAKgG,0BAChBpE,SAAWA,EACX7B,aAAcA,KAEd,kBAAC,EAAD,CACDK,YAAcA,EACd8D,SAAUlE,KAAKiG,4B,GApGA7G,IAAMC,WCFxBkH,IAASC,OACL,kBAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5414b0fb.chunk.js","sourcesContent":["import React from \"react\"\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nclass Header extends React.Component{\n\trender(){\n\t\treturn (\n           <AppBar position=\"static\">\n        <Toolbar>\n        \n          <Typography variant=\"h6\" >\n            Pasbanc\n          </Typography>\n        \n        </Toolbar>\n      </AppBar>\n\n\t\t\t)\n\t}\n}\nexport default Header","import React from \"react\"\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\n\nconst styles ={\n  //this margin makes it perfectly centered for me\n  //however any adjustments can be done to it to ensure \n\n  //the width is big enough to accomodate all numbers\n\twidth:\"300px\",\n  //the height is also good acoording to me to accomodate \n  //my desired eefect\n\theight:\"70px\",\n   fontSize:\"25px\",\n}\n//this components conations just values that is total income and total expenses and the balalnce\nclass Top extends React.Component{\n  //this function is what gives commas separators after three numbers\n    numberWithCommas = x => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n \trender(){\n \t\t//here the transactions are not divided according to their types\n \t\t//they are organised as they were picked form the store because the arrays that were sorted \n \t\t//were a bit crazy for me but that way is possible too\n \t\tconst {transactions} = this.props\n \t\t//this is calculating total income\n \t\t//first from the transactions.i filter out those with type of income\n \t\t//giving me an array of five objects \n \t\t//which i then loop through using the map method to get the object from which i pick \n \t\t//the amount to return an array which i add up to get a single value\n    ////while using the reduce function the 0 acts an initial value for reduction incase of you have deleted everything to give\n    ///a total of zero\n        const totalIncome = transactions.filter(transaction =>\n        \ttransaction.type === \"income\").map(item =>item.amount).reduce((acc,cur)=> acc+ cur,0)\n         //first from the transactions.i filter out those with type of expense\n \t\t//giving me an array of five objects \n \t\t//which i then loop through using the map method to get the object from which i pick \n \t\t//the amount to return an array which i add up to get a single value\n    ////while using the reduce function the 0 acts an initial value for reduction incase of you have deleted everything to give\n    ///a total of zero\n      const totalExpenses = transactions.filter(transaction =>\n        \ttransaction.type === \"expense\").map(item =>item.amount).reduce((acc,cur)=> acc+ cur,0)\n         //subtracting totalExpense from the totalIncome to get balance which is dsiplayed in the center of the app\n      const balance = totalIncome - totalExpenses\n \n\n\n       // console.log(amounts)\n\t\treturn (\n\t\t\t<Container maxWidth=\"sm\">\n     \n        <Typography component=\"div\" style={styles} >\n         <div style={{color:balance < 0 ? \"red\" :\"green\"}}>\n\n       {/*i run each value through the function here to get commas*/}\n         {\n          this.numberWithCommas(balance)\n         }\n         </div>\n        </Typography>\n       {/* //the values of totalIncome and totalExpense are in a grid system such that they lie side bys side\n        //instaed of on top of one another */}\n        <Grid container spacing={5}>\n        <Grid item xs={6} md={6} lg={6}>\n       <Typography style={{color:\"green\"}}>\n     {/*i run each value through the function here to get commas*/}\n        Total Income : {this.numberWithCommas(totalIncome)}\n       </Typography>\n       </Grid>\n       <Grid item xs={6} md={6} lg={6}>\n        <Typography style={{color:\"red\"}}>\n      {/*i run each value through the function here to get commas*/}\n        Total Expense : {this.numberWithCommas(totalExpenses)}\n       </Typography>\n       </Grid>\n       </Grid>\n      \n      </Container>\n\n\t\t\t)\n\t}\n}\nexport default Top","import React from \"react\"\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n//this components holds the tabs which contain each of our transactions\nclass Bottom extends React.Component{\n\n\trender(){\n\t\tconst {categories,onSelect,category } = this.props\n\t\t//console.log(categories)\n    \n    //since materialui takes the value as an index we have to convert the position of each category in categories as\n    //an index\n\t\t//so to be able to click on each of the tabs we have out tabs value as index\n\t\t//so we have a category in App state which we carry down to this file\n\t\t//then we write a ternary operator that the value of index of each category is equal to the index of the category plus one\n\t\t//to cater for the all tab\n    //so we begin by saying is there an index \n    //it is going to exist on clicking one of the tabs \n      const index = category ? \n      //here we are finding the index of each of the categories \n      //since they are two i.e [\"income\",\"expense\"]\n      //the indices would be [0,1] but to each index we add 1\n      // cater for the all tabs\n      ////this line of code below is finding the index of all values in the categories array because to act as the index value\n      ///however we have an all tab to cater for both income and expenses\n      ///so we ensure that all index got are increased by one cater for the all tab\n      categories.findIndex(group => group === category) + 1\n      //if the catgory is not income or expense  it has index of zero which is the all tab\n      : 0\n\n\t\n\t\treturn (\n             <Paper square>\n  <Tabs\n  //now this is going to the value here\n    value={index}\n    indicatorColor=\"primary\"\n    textColor=\"primary\"\n    variant=\"fullWidth\"\n   onChange={(e,index) =>{\n    //if the index is 0 that is all tabs an empty string\n    //if it is not zero,get index of it on which we added one and subtract one to get true index\n    ////to reverse adding one ingetting index\n   onSelect(index === 0 ? \"\": categories[index - 1])\n   }}\n  >\n    <Tab label=\"All Transactions\" />\n\n    {/*//we brought in the categories and  we loop through them to get tab headings\n    //the key prop in necessary to avoid getting an error \n    //it just has to be unique for each category which is why since each category is unique \n    //it can act as a key\n    //it is not a number specifically */}\n    {\n    \tcategories.map(category =>{\n    \t\treturn  <Tab label= {category} key={category}/>\n    \t})\n    }\n\n    \n  </Tabs>\n      \n\n</Paper>\n\n\t\t\t)\n\t}\n}\nexport default Bottom","import React from \"react\"\nimport Top from \"./Top.js\"\nimport Bottom from \"./Bottom.js\"\nclass Main extends React.Component{\n\trender(){\n\t\tconst {categories,onSelect,category,transactions} = this.props\n\t\treturn (\n<React.Fragment>\n<Top transactions={transactions} />\n<Bottom \ncategories={categories} \nonSelect={onSelect} \ncategory={category}/>\n</React.Fragment>\n\t\t\t)\n\t}\n}\nexport default Main","//this is where our data is stored\nexport const categories =[\"income\",\"expense\"]\n\nexport const transactions = [\n\n\n]","import React from \"react\"\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\n\n//this component contains the cards with the transactions under the tabs \n//they are actually linked by the category\n//i am talking about the tabs and the info on cards\nclass Transactions extends React.Component {\n    render() {\n        //picking out what we need from props\n        const { transactions, category, onDelete } = this.props\n\n        return (\n            <div>\n             {/*the transactions rememeber carry a certain structure\n             // //like this [Array(2),Array(2)]\n             // ehich means the first parameter is the type and the next is the array containing \n             // transactions */}\n             {\n              transactions.map(([type,transactions])=>{\n               //in this case we want to ensure that our tabs can pick\n                //up on the specific category \n                //in this case of it being undefined is for all or if a tab is clicked and that category is equal to the type\n                //this is what ensures that when i click on income or expense tab it shows only those \n                return !category || category ===type ?\n\n                        <React.Fragment key={type}>\n                      {/* so to display the data of a particular transaction,i have to map through the transactions only */}\n                       {\n                        transactions.map(transaction=>{\nreturn <Card  variant=\"outlined\" key={transaction.id} style={{marginTop:\"20px\"}}>\n                <IconButton style={{float:\"right\"}} onClick={()=>onDelete(transaction.id)}>\n                     <DeleteIcon />\n                </IconButton>\n                \n                            <CardContent>\n                              <Typography   gutterBottom variant=\"body1\">\n                                Amount :{transaction.amount}\n                              </Typography>\n                            \n                              <Typography variant=\"body1\" component=\"h2\">\n                               Category:{transaction.category}\n                              </Typography>\n                              <Typography   variant=\"body1\">\n                                Notes:{transaction.notes}\n                              </Typography>\n                              <Typography variant=\"body2\" component=\"p\" style={{color: transaction.type === \"income\" ? \"green\" :\"red\"}}>\n                               {transaction.type}\n                              </Typography>\n                            </CardContent>\n     \n                      </Card>\n   \n                        })\n                       }\n                        </React.Fragment>\n                        :null\n              })\n             }\n\n             </div>\n        )\n    }\n}\nexport default Transactions","import React from \"react\"\nimport Grid from '@material-ui/core/Grid';\nimport Transactions from \"./Transactions.js\"\n//this component just ensures that for particular sizes\n//the boxes change size\n//i could have put them right in transactions but that would overcrowd it\nclass Layout extends React.Component{\n\trender(){\n\t\t//this props just pass through to go to transactions\n\t\tconst {transactions ,category,onDelete} = this.props\n\t\treturn (\n\t\t\t<div >\n\t\t\t<Grid container spacing={3} >\n\t\t\t<Grid item xs={12} md={6} lg={6}>\n<Transactions  \n\ncategory={category} \ntransactions={transactions} \nonDelete ={onDelete} \n/>\n</Grid>\n</Grid>\n</div>\n\t\t\t)\n\t}\n}\nexport default Layout","import React from \"react\"\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n//this component is what picks  the data that goes as a new transaction\nclass Form extends React.Component{\n\tstate = {\t\n\topen:false,\n   transaction :{\n\tamount:\"\",\n\ttype:\"\",\n\tcategory:\"\",\n\tnotes:\"\"\n\t\t}\n\t}\n  //this function picks the values passes in the function for each text field \n  //and captures them as name and matches them to the corresponding event values\n\thandleChange = name => e =>{\n\t\tthis.setState({\n      //since theses values are nested in the transaction object it is important to \n      //first spread them\n\t\t\ttransaction :{\n        ...this.state.transaction,\n\t\t[name] : e.target.value\n\t\t\t}\n\t\t})\n\t\t\n\t}\n\t\n  //this handles the closing an opening of the form\nhandleToggle=()=>{\n\tthis.setState({\n\t\topen:!this.state.open\n\t})\n\t\t}\n    //this is the function that handles the transaction created and passes\n    //it the App.js to be added to the transactions array\n    //it happens on clickin the add button at hte bottom of the form\nhandleTransaction =() =>{\n//first we close the form\n\tthis.handleToggle();\n  //we  spread out the array for two things\n  //1.to convert the amount to a number as it is captured is string form\n  //trust me the type number of the text fiels does not work\n  //2.to add AN ID\n  //REMEMBER IT ONLY ADDS ONE OBJECT SO THE ID CAN REMIAN THE SAME ONLY IN THIS CASE\n\tthis.props.onSubmit({\n\t\t...this.state.transaction,\n\t\tamount:parseInt(this.state.transaction.amount),\n\t\tid:Math.floor(Math.random()* 10000000),\n\t})\n  //this then re-initialises the form removing the previous values\n\tthis.setState({\n  transaction :{\n\tamount:\"\",\n\ttype:\"\",\n\tcategory:\"\",\n\tnotes:\"\"\n\t\t}\n\t})\n}\n\t\n\trender(){\n    //passing in necessary props using destructuring\n\t\tconst {transaction:{amount,category,notes},open}  = this.state\n\nreturn <form>\n{/*//this is the button in the appbar which you click to show the form using handleToggle function */}\n  <Fab color=\"secondary\" aria-label=\"add\" size=\"small\"onClick={this.handleToggle}style={{marginBottom:\"2px\",marginTop:\"200px\",float:\"right\"}}>\n        <AddIcon />\n   </Fab>\n\n\n  <Dialog \n  open={open}\n  onClose ={this.handleToggle}\n  onChange ={this.handleDialog} >\n        <DialogTitle >Create </DialogTitle>\n        <DialogContent> \n         <FormControl >\n      <FormLabel component=\"legend\">Transaction Type</FormLabel>\n      <RadioGroup  onChange={this.handleChange(\"type\")}>\n        <FormControlLabel value=\"income\" control={<Radio />} label=\"income\" />\n        <FormControlLabel value=\"expense\" control={<Radio />} label=\"expense\" />\n      </RadioGroup>\n    </FormControl>\n           <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Amount\"\n            type=\"number\"\n            value={amount}\n            fullWidth\n            onChange ={this.handleChange(\"amount\")}\n          />\n           <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Category\"\n            type=\"text\"\n            value={category}\n            fullWidth\n            onChange ={this.handleChange(\"category\")}\n          />\n           <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Notes\"\n            type=\"text\"\n            value={notes}\n            fullWidth\n            multiline\n            onChange ={this.handleChange(\"notes\")}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button  color=\"primary\" onClick={this.handleTransaction}>\n            Add\n          </Button>\n          \n        </DialogActions>\n      </Dialog>\n      </form>\n\t}\n}\n\n\nexport default Form","import React from \"react\"\nimport Form from \"../Layout/Form.js\"\nclass AddTransaction extends React.Component{\n\trender(){\n\t\tconst {transaction,onSubmit}= this.props\n\t\treturn <Form \n         transaction ={transaction}\n         onSubmit={onSubmit}\n          />\n\t}\n}\nexport default AddTransaction","import React from 'react';\nimport Header from \"./components/header/Header.js\"\nimport Main from \"./components/Layout/Main.js\"\nimport {categories,transactions} from \"./Store.js\"\nimport Layout from \"./components/Transactions/Layout.js\"\nimport AddTransaction from \"./components/Transactions/AddTransaction.js\"\nclass App extends React.Component{\n\t//the state contains the transactions from the store and \n\t//category selected which can be income or expense\n\t//and the transaction to be added which is in the tabs\n\tstate ={\n\t\ttransactions,\n\t\tcategory:\"\",\n\t\ttransaction:{}\n\t}\n\t//this function ensures that each tab has its own category\n\t//so for each tab we assign a category from the categories using an index as \n\t//seen in the file Bottom.js\n\thandleCategorySelected = (categories)=> \n\tthis.setState({\n\t\tcategory : categories\n\t})\n\n\tgetTransactionsByCategory(){\n\t\t\n\treturn \tthis.state.transactions.reduce((transactions,transaction)=>{\n\t\t\t//this reduce function returns each transactionas an independent object\n\t\t\t//this function is going to assign all transactions according to type\n\t\t\t//that is income or expense\n\t\t\t//so first we pick out the type from each transcation which using destructing\n\t\t\tconst {type} = transaction\n\t\t\t//next we try to categories all the data according to type\n\t\t\t//this next line ensures each item has a type if not the type is given as undefined\n\t\t\t//like this{income:Array(5),expense:Array(4),undefined:Array(1)}\n\t\t\t//because the number of transactions are ten\n\t\t\ttransactions[type] = transactions[type]\t? \n          //if they all have type we spread the  object for each type to get\n          //all its transactions\n          //like this{income:Array(5),expense:Array(5)}\t\t\t//like this{income:Array(5),expense:Array(4),undefined:Array(1)}\n\t\t\t//like this{income:Array(5),expense:Array(4),undefined:Array(1)}\n\t\t\t[...transactions[type],transaction]\n\t\t\t:[transaction]\n            //we return the transactions in their categories way\n         \treturn transactions\n\n\t\t},{})\n\t}\n\t//this is the function that adds the a new item to the transactions\n\t//i pick this new item from the Form.js file as a trnsaction which is seen\n\t//as a parameter in the function and then i add to the top of the transactions\n\t//array using the spread operator \n\t//however this only adds one item per go\n\t//as you will see that the previous item added is replaced by the new item added\n\t\n\n//this function deletes one transaction at a time by picking the id from \n//the transactions.js file and this function filters through the entire transactions array\n//and picks returns all transactions whose id is not equal to that id\n   deleteSelectedTransaction = (id) =>{\n   \tthis.setState((state)=>({\n   \t\ttransactions : state.transactions.filter(transaction => transaction.id !== id)\n   \t}))\n   }\n   handleNewTransaction =(transaction)=>{\n   \tthis.setState({\n   \t\ttransactions :[\n   \t\ttransaction,\n   \t\t...this.state.transactions\n   \t\t]\n   \t})\n   }\n\n render(){\n \t \tconst transactions = Object.entries(this.getTransactionsByCategory())\n \t//object.entries enables us to convert our object to an array\n \t//like this [Array(2),Array(2)]\n \t///the first array has the first item as the transaction type and the other item as the array of items\n \t//console.log(transactions)\n \t\n   //\tconsole.log(this.state.transactions)\n\n\n \t//destructing and picking category and transaction from the state\nconst {category,transaction} = this.state\n//they are then passed in these components as seen fit\n  return (\n  \t\n  \t<React.Fragment  >\n  \t<div >\n   <Header \n  \n    />\n    <Main  \n    transactions={this.state.transactions}\n    categories ={categories} \n    onSelect ={this.handleCategorySelected} \n    category={category}/>\n    <Layout\n    \n    onEdit={this.editSelectedTransaction}\n    onDelete ={this.deleteSelectedTransaction}\n    category ={category}\n    transactions={transactions}/>\n    </div>\n    <AddTransaction \n   transaction ={transaction}\n   onSubmit={this.handleNewTransaction}\n    />\n    </React.Fragment>\n    )\n }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}
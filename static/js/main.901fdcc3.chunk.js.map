{"version":3,"sources":["components/Layout/Form.js","components/header/Header.js","components/Layout/Top.js","components/Layout/Bottom.js","components/Layout/Main.js","Store.js","components/Transactions/Transactions.js","components/Transactions/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","open","transaction","amount","type","category","notes","handleChange","name","e","setState","target","value","handleToggle","handleTransaction","props","onSubmit","parseInt","id","this","Fab","color","aria-label","size","onClick","Dialog","onClose","onChange","handleDialog","DialogTitle","DialogContent","FormControl","FormLabel","component","RadioGroup","FormControlLabel","control","Radio","label","TextField","autoFocus","margin","fullWidth","multiline","DialogActions","Button","React","Component","Header","AppBar","position","Toolbar","Typography","variant","style","flex","styles","width","height","fontSize","Top","numberWithCommas","x","toString","replace","transactions","totalIncome","filter","map","item","reduce","acc","cur","totalExpenses","balance","Grid","container","spacing","xs","md","lg","Bottom","categories","onSelect","index","findIndex","group","Paper","square","Tabs","indicatorColor","textColor","Tab","key","Main","Fragment","Transactions","onDelete","Card","marginTop","IconButton","float","CardContent","gutterBottom","Layout","App","handleCategorySelected","handleNewTransaction","deleteSelectedTransaction","Object","entries","getTransactionsByCategory","onEdit","editSelectedTransaction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.901fdcc3.chunk.js","sourcesContent":["import React from \"react\"\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n//this component is what picks  the data that goes as a new transaction\nclass Form extends React.Component{\n\tstate = {\t\n\topen:false,\n   transaction :{\n\tamount:\"\",\n\ttype:\"\",\n\tcategory:\"\",\n\tnotes:\"\"\n\t\t}\n\t}\n  //this function picks the values passes in the function for each text field \n  //and captures them as name and matches them to the corresponding event values\n\thandleChange = name => e =>{\n\t\tthis.setState({\n      //since theses values are nested in the transaction object it is important to \n      //first spread them\n\t\t\ttransaction :{\n        ...this.state.transaction,\n\t\t[name] : e.target.value\n\t\t\t}\n\t\t})\n\t\t\n\t}\n\t\n  //this handles the closing an opening of the form\nhandleToggle=()=>{\n\tthis.setState({\n\t\topen:!this.state.open\n\t})\n\t\t}\n    //this is the function that handles the transaction created and passes\n    //it the App.js to be added to the transactions array\n    //it happens on clickin the add button at hte bottom of the form\nhandleTransaction =() =>{\n//first we close the form\n\tthis.handleToggle();\n  //we  spread out the array for two things\n  //1.to convert the amount to a number as it is captured is string form\n  //trust me the type number of the text fiels does not work\n  //2.to add AN ID\n  //REMEMBER IT ONLY ADDS ONE OBJECT SO THE ID CAN REMIAN THE SAME ONLY IN THIS CASE\n\tthis.props.onSubmit({\n\t\t...this.state.transaction,\n\t\tamount:parseInt(this.state.transaction.amount),\n\t\tid:11\n\t})\n  //this then re-initialises the form removing the previous values\n\tthis.setState({\n  transaction :{\n\tamount:\"\",\n\ttype:\"\",\n\tcategory:\"\",\n\tnotes:\"\"\n\t\t}\n\t})\n}\n\t\n\trender(){\n    //passing in necessary props using destructuring\n\t\tconst {transaction:{amount,category,notes},open}  = this.state\n\nreturn <form>\n{/*//this is the button in the appbar which you click to show the form using handleToggle function */}\n  <Fab color=\"secondary\" aria-label=\"add\" size=\"small\"onClick={this.handleToggle}>\n        <AddIcon />\n   </Fab>\n\n\n  <Dialog \n  open={open}\n  onClose ={this.handleToggle}\n  onChange ={this.handleDialog} >\n        <DialogTitle >Create </DialogTitle>\n        <DialogContent> \n         <FormControl >\n      <FormLabel component=\"legend\">Transaction Type</FormLabel>\n      <RadioGroup  onChange={this.handleChange(\"type\")}>\n        <FormControlLabel value=\"income\" control={<Radio />} label=\"income\" />\n        <FormControlLabel value=\"expense\" control={<Radio />} label=\"expense\" />\n      </RadioGroup>\n    </FormControl>\n           <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Amount\"\n            type=\"number\"\n            value={amount}\n            fullWidth\n            onChange ={this.handleChange(\"amount\")}\n          />\n           <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Category\"\n            type=\"text\"\n            value={category}\n            fullWidth\n            onChange ={this.handleChange(\"category\")}\n          />\n           <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Notes\"\n            type=\"text\"\n            value={notes}\n            fullWidth\n            multiline\n            onChange ={this.handleChange(\"notes\")}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button  color=\"primary\" onClick={this.handleTransaction}>\n            Add\n          </Button>\n          \n        </DialogActions>\n      </Dialog>\n      </form>\n\t}\n}\n\n\nexport default Form","import React from \"react\"\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Form from \"../Layout/Form.js\"\nclass Header extends React.Component{\n \n  \n\trender(){\n   const {onSubmit,transaction} = this.props\n\t\treturn (\n           <AppBar position=\"static\">\n        <Toolbar>\n        \n          <Typography variant=\"h6\" style={{flex:1}}>\n            Pasbanc\n          </Typography>\n         <Form \n         transaction ={transaction}\n         onSubmit={onSubmit} />\n        </Toolbar>\n      </AppBar>\n\n\t\t\t)\n\t}\n}\nexport default Header","import React from \"react\"\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nconst styles ={\n  //this margin makes it perfectly centered for me\n  //however any adjustments can be done to it to ensure \n  //any desrirable effect\n  margin:\"80px 10px 80px 320px\",\n  //the width is big enough to accomodate all numbers\n\twidth:\"300px\",\n  //the height is also good acoording to me to accomodate \n  //my desired eefect\n\theight:\"70px\",\n   fontSize:\"50px\",\n}\n//this components conations just values that is total income and total expenses and the balalnce\nclass Top extends React.Component{\n  //this function is what gives commas separators after three numbers\n    numberWithCommas = x => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n \trender(){\n \t\t//here the transactions are not divided according to their types\n \t\t//they are organised as they were picked form the store because the arrays that were sorted \n \t\t//were a bit crazy for me but that way is possible too\n \t\tconst {transactions} = this.props\n \t\t//this is calculating total income\n \t\t//first from the transactions.i filter out those with type of income\n \t\t//giving me an array of five objects \n \t\t//which i then loop through using the map method to get the object from which i pick \n \t\t//the amount to return an array which i add up to get a single value\n    ////while using the reduce function the 0 acts an initial value for reduction incase of you have deleted everything to give\n    ///a total of zero\n        const totalIncome = transactions.filter(transaction =>\n        \ttransaction.type === \"income\").map(item =>item.amount).reduce((acc,cur)=> acc+ cur,0)\n         //first from the transactions.i filter out those with type of expense\n \t\t//giving me an array of five objects \n \t\t//which i then loop through using the map method to get the object from which i pick \n \t\t//the amount to return an array which i add up to get a single value\n    ////while using the reduce function the 0 acts an initial value for reduction incase of you have deleted everything to give\n    ///a total of zero\n      const totalExpenses = transactions.filter(transaction =>\n        \ttransaction.type === \"expense\").map(item =>item.amount).reduce((acc,cur)=> acc+ cur,0)\n         //subtracting totalExpense from the totalIncome to get balance which is dsiplayed in the center of the app\n      const balance = totalIncome - totalExpenses\n \n\n\n       // console.log(amounts)\n\t\treturn (\n\t\t\t<div >\n     \n        <Typography component=\"div\" style={styles} >\n         <div style={{color:balance < 0 ? \"red\" :\"green\"}}>\n\n       {/*i run each value through the function here to get commas*/}\n         {\n          this.numberWithCommas(balance)\n         }\n         </div>\n        </Typography>\n       {/* //the values of totalIncome and totalExpense are in a grid system such that they lie side bys side\n        //instaed of on top of one another */}\n        <Grid container spacing={5}>\n        <Grid item xs={6} md={6} lg={6}>\n       <Typography style={{color:\"green\"}}>\n     {/*i run each value through the function here to get commas*/}\n        Total Income : {this.numberWithCommas(totalIncome)}\n       </Typography>\n       </Grid>\n       <Grid item xs={6} md={6} lg={6}>\n        <Typography style={{color:\"red\"}}>\n      {/*i run each value through the function here to get commas*/}\n        Total Expense : {this.numberWithCommas(totalExpenses)}\n       </Typography>\n       </Grid>\n       </Grid>\n      \n      </div>\n\n\t\t\t)\n\t}\n}\nexport default Top","import React from \"react\"\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n//this components holds the tabs which contain each of our transactions\nclass Bottom extends React.Component{\n\n\trender(){\n\t\tconst {categories,onSelect,category } = this.props\n\t\t//console.log(categories)\n    \n    //since materialui takes the value as an index we have to convert the position of each category in categories as\n    //an index\n\t\t//so to be able to click on each of the tabs we have out tabs value as index\n\t\t//so we have a category in App state which we carry down to this file\n\t\t//then we write a ternary operator that the value of index of each category is equal to the index of the category plus one\n\t\t//to cater for the all tab\n    //so we begin by saying is there an index \n    //it is going to exist on clicking one of the tabs \n      const index = category ? \n      //here we are finding the index of each of the categories \n      //since they are two i.e [\"income\",\"expense\"]\n      //the indices would be [0,1] but to each index we add 1\n      // cater for the all tabs\n      ////this line of code below is finding the index of all values in the categories array because to act as the index value\n      ///however we have an all tab to cater for both income and expenses\n      ///so we ensure that all index got are increased by one cater for the all tab\n      categories.findIndex(group => group === category) + 1\n      //if the catgory is not income or expense  it has index of zero which is the all tab\n      : 0\n\n\t\n\t\treturn (\n             <Paper square>\n  <Tabs\n  //now this is going to the value here\n    value={index}\n    indicatorColor=\"primary\"\n    textColor=\"primary\"\n    variant=\"fullWidth\"\n   onChange={(e,index) =>{\n    //if the index is 0 that is all tabs an empty string\n    //if it is not zero,get index of it on which we added one and subtract one to get true index\n    ////to reverse adding one ingetting index\n   onSelect(index === 0 ? \"\": categories[index - 1])\n   }}\n  >\n    <Tab label=\"All Transactions\" />\n\n    {/*//we brought in the categories and  we loop through them to get tab headings\n    //the key prop in necessary to avoid getting an error \n    //it just has to be unique for each category which is why since each category is unique \n    //it can act as a key\n    //it is not a number specifically */}\n    {\n    \tcategories.map(category =>{\n    \t\treturn  <Tab label= {category} key={category}/>\n    \t})\n    }\n\n    \n  </Tabs>\n      \n\n</Paper>\n\n\t\t\t)\n\t}\n}\nexport default Bottom","import React from \"react\"\nimport Top from \"./Top.js\"\nimport Bottom from \"./Bottom.js\"\nclass Main extends React.Component{\n\trender(){\n\t\tconst {categories,onSelect,category,transactions} = this.props\n\t\treturn (\n<React.Fragment>\n<Top transactions={transactions} />\n<Bottom \ncategories={categories} \nonSelect={onSelect} \ncategory={category}/>\n</React.Fragment>\n\t\t\t)\n\t}\n}\nexport default Main","//this is where our data is stored\nexport const categories =[\"income\",\"expense\"]\n\nexport const transactions = [\n{\n\tid:1,\n\tamount:200000,\n\ttype:\"income\",\n\tcategory:\"mom\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},\n{\n\tid:2,\n\tamount:170000,\n\ttype:\"income\",\n\tcategory:\"dad\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},\n{\n\tid:3,\n\tamount:980000,\n\ttype:\"income\",\n\tcategory:\"programming\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},{\n\tid:4,\n\tamount:2110000,\n\ttype:\"income\",\n\tcategory:\"aunt\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},{\n\tid:5,\n\tamount:900000,\n\ttype:\"income\",\n\tcategory:\"uncle Jolem\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},\n{\n\tid:6,\n\tamount:870000,\n\ttype:\"expense\",\n\tcategory:\"partnership\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},{\n\tid:7,\n\tamount:200000,\n\ttype:\"expense\",\n\tcategory:\"offering\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},{\n\tid:8,\n\tamount:200000,\n\ttype:\"expense\",\n\tcategory:\"transport\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},{\n\tid:9,\n\tamount:200000,\n\ttype:\"expense\",\n\tcategory:\"transport\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},{\n\tid:10,\n\tamount:650000,\n\t\n\ttype:\"expense\",\n\tcategory:\"lunch\",\n\tnotes:\"Lorem ipsum dolor sobcaecati enim. Nemo possimus earum ratione.\"\n},\n]","import React from \"react\"\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\n\n//this component contains the cards with the transactions under the tabs \n//they are actually linked by the category\n//i am talking about the tabs and the info on cards\nclass Transactions extends React.Component {\n    render() {\n        //picking out what we need from props\n        const { transactions, category, onDelete } = this.props\n\n        return (\n            <div>\n             {/*the transactions rememeber carry a certain structure\n             // //like this [Array(2),Array(2)]\n             // ehich means the first parameter is the type and the next is the array containing \n             // transactions */}\n             {\n              transactions.map(([type,transactions])=>{\n               //in this case we want to ensure that our tabs can pick\n                //up on the specific category \n                //in this case of it being undefined is for all or if a tab is clicked and that category is equal to the type\n                //this is what ensures that when i click on income or expense tab it shows only those \n                return !category || category ===type ?\n\n                        <React.Fragment key={type}>\n                      {/* so to display the data of a particular transaction,i have to map through the transactions only */}\n                       {\n                        transactions.map(transaction=>{\nreturn <Card  variant=\"outlined\" key={transaction.id} style={{marginTop:\"20px\"}}>\n                <IconButton style={{float:\"right\"}} onClick={()=>onDelete(transaction.id)}>\n                     <DeleteIcon />\n                </IconButton>\n                \n                            <CardContent>\n                              <Typography   gutterBottom variant=\"body1\">\n                                Amount :{transaction.amount}\n                              </Typography>\n                            \n                              <Typography variant=\"body1\" component=\"h2\">\n                               Category:{transaction.category}\n                              </Typography>\n                              <Typography   variant=\"body1\">\n                                Notes:{transaction.notes}\n                              </Typography>\n                              <Typography variant=\"body2\" component=\"p\" style={{color: transaction.type === \"income\" ? \"green\" :\"red\"}}>\n                               {transaction.type}\n                              </Typography>\n                            </CardContent>\n     \n                      </Card>\n   \n                        })\n                       }\n                        </React.Fragment>\n                        :null\n              })\n             }\n\n             </div>\n        )\n    }\n}\nexport default Transactions","import React from \"react\"\nimport Grid from '@material-ui/core/Grid';\nimport Transactions from \"./Transactions.js\"\n//this component just ensures that for particular sizes\n//the boxes change size\n//i could have put them right in transactions but that would overcrowd it\nclass Layout extends React.Component{\n\trender(){\n\t\t//this props just pass through to go to transactions\n\t\tconst {transactions ,category,onDelete} = this.props\n\t\treturn (\n\t\t\t<div >\n\t\t\t<Grid container spacing={3} >\n\t\t\t<Grid item xs={12} md={6} lg={6}>\n<Transactions  \n\ncategory={category} \ntransactions={transactions} \nonDelete ={onDelete} \n/>\n</Grid>\n</Grid>\n</div>\n\t\t\t)\n\t}\n}\nexport default Layout","import React from 'react';\nimport Header from \"./components/header/Header.js\"\nimport Main from \"./components/Layout/Main.js\"\nimport {categories,transactions} from \"./Store.js\"\nimport Layout from \"./components/Transactions/Layout.js\"\nclass App extends React.Component{\n\t//the state contains the transactions from the store and \n\t//category selected which can be income or expense\n\t//and the transaction to be added which is in the tabs\n\tstate ={\n\t\ttransactions,\n\t\tcategory:\"\",\n\t\ttransaction:{}\n\t}\n\t//this function ensures that each tab has its own category\n\t//so for each tab we assign a category from the categories using an index as \n\t//seen in the file Bottom.js\n\thandleCategorySelected = (categories)=> \n\tthis.setState({\n\t\tcategory : categories\n\t})\n\n\tgetTransactionsByCategory(){\n\t\t\n\treturn \tthis.state.transactions.reduce((transactions,transaction)=>{\n\t\t\t//this reduce function returns each transactionas an independent object\n\t\t\t//this function is going to assign all transactions according to type\n\t\t\t//that is income or expense\n\t\t\t//so first we pick out the type from each transcation which using destructing\n\t\t\tconst {type} = transaction\n\t\t\t//next we try to categories all the data according to type\n\t\t\t//this next line ensures each item has a type if not the type is given as undefined\n\t\t\t//like this{income:Array(5),expense:Array(4),undefined:Array(1)}\n\t\t\t//because the number of transactions are ten\n\t\t\ttransactions[type] = transactions[type]\t? \n          //if they all have type we spread the  object for each type to get\n          //all its transactions\n          //like this{income:Array(5),expense:Array(5)}\t\t\t//like this{income:Array(5),expense:Array(4),undefined:Array(1)}\n\t\t\t//like this{income:Array(5),expense:Array(4),undefined:Array(1)}\n\t\t\t[...transactions[type],transaction]\n\t\t\t:[transaction]\n            //we return the transactions in their categories way\n         \treturn transactions\n\n\t\t},{})\n\t}\n\t//this is the function that adds the a new item to the transactions\n\t//i pick this new item from the Form.js file as a trnsaction which is seen\n\t//as a parameter in the function and then i add to the top of the transactions\n\t//array using the spread operator \n\t//however this only adds one item per go\n\t//as you will see that the previous item added is replaced by the new item added\n\thandleNewTransaction = (transaction) =>{\n\t\tthis.setState((state)=>({\n\t\t\ttransactions : [\n\t\t\ttransaction,\n\t\t\t...transactions\n\t\t\t]\n\t\t}))\n\t}\n\n//this function deletes one transaction at a time by picking the id from \n//the transactions.js file and this function filters through the entire transactions array\n//and picks returns all transactions whose id is not equal to that id\n   deleteSelectedTransaction = (id) =>{\n   \tthis.setState((state)=>({\n   \t\ttransactions : state.transactions.filter(transaction => transaction.id !== id)\n   \t}))\n   }\n   \n\n render(){\n \t \tconst transactions = Object.entries(this.getTransactionsByCategory())\n \t//object.entries enables us to convert our object to an array\n \t//like this [Array(2),Array(2)]\n \t///the first array has the first item as the transaction type and the other item as the array of items\n \t//console.log(transactions)\n \t\n\n\n \t//destructing and picking category and transaction from the state\nconst {category,transaction} = this.state\n//they are then passed in these components as seen fit\n  return (\n  \t<React.Fragment >\n  \t<div >\n   <Header \n   transaction ={transaction}\n   onSubmit={this.handleNewTransaction} />\n    <Main  \n    transactions={this.state.transactions}\n    categories ={categories} \n    onSelect ={this.handleCategorySelected} \n    category={category}/>\n    <Layout\n    \n    onEdit={this.editSelectedTransaction}\n    onDelete ={this.deleteSelectedTransaction}\n    category ={category}\n    transactions={transactions}/>\n    </div>\n    </React.Fragment>\n    )\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}